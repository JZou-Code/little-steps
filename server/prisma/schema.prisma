// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  PARENT
}

enum BindStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id            String      @id @default(uuid())
  email         String      @unique
  password      String
  name          String?
  role          Role
  phone         String?
  department    String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  children      Child[]

  bindRequests      BindRequest[]       @relation("ParentBind")
  actedBind         BindRequest[]       @relation("BindActedBy")
  newsletters       Newsletter[]        @relation("Author")
  comments          Comment[]           @relation("CommentAuthor")
  parentMessages    ChildMessage[]      @relation("ParentMessages")
  teacherMessages   ChildMessage[]      @relation("TeacherMessages")
}

model Child {
  id           String         @id @default(uuid())
  name         String
  dob          DateTime
  gender       String?
  parentId     String
  parent       User           @relation(fields: [parentId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  bindRequests BindRequest[]
  messages     ChildMessage[] @relation("AboutChild")
}

model BindRequest {
  id           String       @id @default(uuid())
  parent       User         @relation("ParentBind", fields: [parentId], references: [id])
  parentId     String
  child        Child        @relation(fields: [childId], references: [id])
  childId      String
  status       BindStatus   @default(PENDING)
  requestedAt  DateTime     @default(now())
  actedBy      User?        @relation("BindActedBy", fields: [actedById], references: [id])
  actedById    String?
  actedAt      DateTime?
  note         String?
}

model ChildMessage {
  id            String      @id @default(uuid())
  childId       String
  child         Child       @relation("AboutChild", fields: [childId], references: [id])
  parentId      String
  parent        User        @relation("ParentMessages", fields: [parentId], references: [id])
  teacherId     String
  teacher       User        @relation("TeacherMessages", fields: [teacherId], references: [id])

  content       String
  role          Role
  createdAt     DateTime    @default(now())
}

model Newsletter {
  id            String         @id @default(uuid())
  author        User           @relation("Author", fields: [authorId], references: [id])
  authorId      String
  title         String
  body          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  comments      Comment[]      @relation("OnNewsletter")
}

model Comment {
  id              String        @id @default(uuid())
  authorId        String
  author          User          @relation("CommentAuthor", fields: [authorId], references: [id])
  newsletterId    String?
  newsletter      Newsletter?   @relation("OnNewsletter", fields: [newsletterId], references: [id])
  content         String
  createdAt       DateTime      @default(now())
}