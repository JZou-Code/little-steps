// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  PARENT
  OTHER
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  password   String
  firstName  String
  lastName   String
  role       Role
  department String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  children   Child[]

  newsletters   Newsletter[]   @relation("Author")
  comments      Comment[]      @relation("CommentsToAuthor")
  MessageSender ChildMessage[] @relation("MessageSender")
}

model Child {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  dob       DateTime @db.Date
  gender    String
  parentId  String?
  parent    User?    @relation(fields: [parentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages ChildMessage[] @relation("AboutChild")
}

model ChildMessage {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  childId  String
  child    Child  @relation("AboutChild", fields: [childId], references: [id])
  senderId String
  sender   User   @relation("MessageSender", fields: [senderId], references: [id])
}

model Newsletter {
  id        String   @id @default(uuid())
  author    User     @relation("Author", fields: [authorId], references: [id])
  authorId  String
  title     String
  content   String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments     Comment[]      @relation("CommentsToNewsletter")
  ArticleImage ArticleImage[] @relation("ImagesToNewsletter")
}

model Comment {
  id           String      @id @default(uuid())
  authorId     String
  author       User        @relation("CommentsToAuthor", fields: [authorId], references: [id])
  newsletterId String?
  newsletter   Newsletter? @relation("CommentsToNewsletter", fields: [newsletterId], references: [id])
  content      String
  createdAt    DateTime    @default(now())
}

model ArticleImage {
  id           String     @id @default(uuid())
  newsletter   Newsletter @relation("ImagesToNewsletter", fields: [newsletterId], references: [id], onDelete: Cascade)
  newsletterId String

  storageKey String
  mimeType   String
  position   Int
  createdAt  DateTime @default(now())

  @@unique([newsletterId, position])
}
