name: Deploy Backend (EC2 + systemd)

on:
  push:
    branches: [ main ]
    paths:
      - 'server/**'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch: {}

concurrency:
  group: deploy-backend
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Archive server
        run: |
          cd server
          rm -rf node_modules
          zip -r ../server.zip .

      - name: Copy bundle to EC2 (via SCP)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "server.zip"
          target: "/tmp"
          debug: true

      - name: Deploy on EC2 & restart myapp (systemd)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            set -euo pipefail

            APP_ROOT=/var/www/myapp
            APP_DIR=$APP_ROOT/current
            ENV_FILE=$APP_ROOT/shared/.env
            ZIP=/tmp/server.zip

            # 目录准备
            sudo mkdir -p "$APP_DIR" "$APP_ROOT/shared"
            sudo chown -R deploy:deploy "$APP_ROOT"

            # 如需用 Secret 同步 /var/www/myapp/shared/.env（可选）
            if [ -n "${{ secrets.BACKEND_ENV_BASE64 || '' }}" ]; then
              echo "${{ secrets.BACKEND_ENV_BASE64 }}" | base64 -d | sudo tee "$ENV_FILE" >/dev/null
              sudo chown deploy:deploy "$ENV_FILE"
              sudo chmod 600 "$ENV_FILE"
            fi

            # 将 /tmp/server.zip 移到代码目录并改属主
            sudo mv "$ZIP" "$APP_DIR"/server.zip
            sudo chown deploy:deploy "$APP_DIR"/server.zip

            # 以 deploy 身份执行后续
            sudo -u deploy bash -lc "
              set -e
              cd '$APP_DIR'

              # nvm（若存在）
              if command -v nvm >/dev/null 2>&1; then
                . ~/.nvm/nvm.sh
                nvm install 20 >/dev/null 2>&1 || true
                nvm use 20 || true
              fi

              unzip -o server.zip
              rm -f server.zip

              # 让 Prisma CLI 能加载环境变量
              ln -sf '$ENV_FILE' .env

              npm ci
              npx prisma migrate deploy || true
              [ -f tsconfig.json ] && npm run build
            "

            # 重启并在失败时打印日志
            sudo systemctl daemon-reload || true
            if ! sudo systemctl restart myapp; then
              echo '=== myapp restart failed, recent logs ==='
              journalctl -u myapp -n 200 --no-pager || true
              exit 1
            fi
            sudo systemctl status --no-pager --full myapp || true

            echo 'DEPLOY OK'
